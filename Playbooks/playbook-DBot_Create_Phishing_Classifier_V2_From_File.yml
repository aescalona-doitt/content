elasticcommonfields: {}
id: 524685e0-d880-4673-8bab-f073d0c533ec
version: 10
name: DBot Create Phishing Classifier V2 From File
description: Create a phishing classifier using machine learning technique, based
  on email content.
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: f96785c7-7d04-4f99-8da3-929501848239
    type: start
    task:
      elasticcommonfields: {}
      id: f96785c7-7d04-4f99-8da3-929501848239
      version: -1
      name: ""
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "9"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 50
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "8":
    id: "8"
    taskid: a9333d16-a1b0-4f04-8ce6-f13e0da7ebea
    type: title
    task:
      elasticcommonfields: {}
      id: a9333d16-a1b0-4f04-8ce6-f13e0da7ebea
      version: -1
      name: Done
      type: title
      iscommand: false
      brand: ""
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 720
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "9":
    id: "9"
    taskid: b02f7e95-9077-4167-8de5-48e251e8acc6
    type: regular
    task:
      elasticcommonfields: {}
      id: b02f7e95-9077-4167-8de5-48e251e8acc6
      version: -1
      name: Get Incidents From File
      description: Gets a list of incident objects from a file.
      scriptName: GetIncidentsFromFile
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "14"
    scriptarguments:
      FileID:
        simple: ${inputs.fileID}
      inputType:
        simple: csv
      limit:
        simple: ${inputs.maxIncidentsToFetchOnTraining}
      outputFormat:
        simple: ${inputs.outputFormat}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 195
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "11":
    id: "11"
    taskid: c31a66b6-7496-4c7f-8517-49e587d2e570
    type: regular
    task:
      elasticcommonfields: {}
      id: c31a66b6-7496-4c7f-8517-49e587d2e570
      version: -1
      name: Train Model
      description: Train a machine learning text classifier.
      scriptName: DBotTrainTextClassifierV2
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "8"
    scriptarguments:
      findKeywords: {}
      input:
        simple: ${DBotPreProcessTextData.Filename},${inputs.historicalDataFileListName}
      inputType:
        complex:
          root: DBotPreProcessTextData
          accessor: FileFormat
          transformers:
          - operator: concat
            args:
              prefix: {}
              suffix:
                value:
                  simple: _filename
      keywordMinScore: {}
      maxBelowThreshold: {}
      metric: {}
      modelName:
        simple: ${inputs.modelName}
      overrideExistingModel:
        simple: ${inputs.overrideModel}
      phishingLabels:
        simple: ${inputs.phishingLabels}
      storeModel:
        simple: "true"
      tagField:
        simple: ${inputs.emailTagKey}
      targetAccuracy:
        simple: ${inputs.modelTargetAccuracy}
      textField:
        simple: ${DBotPreProcessTextData.TextFieldProcessed}
      trainSetRatio: {}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 545
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "14":
    id: "14"
    taskid: 9bd52e2d-a71c-467c-8b69-40059360f9be
    type: regular
    task:
      elasticcommonfields: {}
      id: 9bd52e2d-a71c-467c-8b69-40059360f9be
      version: -1
      name: Pre-process file
      description: |-
        Pre-process text data for the machine learning text classifier.
        The pre-process normalize the text:
        - Remove HTML tags
        - Convert every word to it's root (goes -> go)
        - Remove sample text of which the total number words are less than or equal to a threshold
        - Remove emails with similarity greater then some threshold.
      scriptName: DBotPreProcessTextData
      type: regular
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "11"
    scriptarguments:
      cleanHTML:
        simple: "true"
      dedupThreshold:
        simple: ${inputs.dedupThreshold}
      hashSeed:
        simple: ${inputs.hashData}
      input:
        simple: ${lastCompletedTaskEntries}
      inputType:
        simple: ${GetIncidentsFromFile.FileFormat}
      outputFormat:
        simple: ${inputs.outputFormat}
      preProcessType:
        simple: nlp
      removeShortTextThreshold:
        simple: ${inputs.removeShortTextThreshold}
      textFields:
        simple: ${inputs.emailSubjectKey},${inputs.emailTextKey}
      whitelistFields:
        simple: ${inputs.emailTagKey}
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 50,
          "y": 370
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 735,
        "width": 380,
        "x": 50,
        "y": 50
      }
    }
  }
inputs:
- key: modelName
  value:
    simple: phishing_model
  required: false
  description: The model name to store in the system.
  playbookInputQuery: null
- key: emailTextKey
  value:
    simple: emailbody|emailbodyhtml|details
  required: false
  description: A comma-separated list of incident fields names with the email body
    or html body. You can also use "|" if you want to choose the first non-empty value
    from a list of fields.
  playbookInputQuery: null
- key: emailSubjectKey
  value:
    simple: emailsubject|name
  required: false
  description: A comma-separated list of incident fields names with the email subject.
    You can also use "|" if you want to choose the first non-empty value from a list
    of fields.
  playbookInputQuery: null
- key: emailTagKey
  value:
    simple: emailclassification
  required: false
  description: The field name with the email tag. Supports a comma-separated list,
    the first non-empty value will be taken.
  playbookInputQuery: null
- key: phishingLabels
  value:
    simple: '*'
  required: false
  description: 'A comma-separated list of email tags values and mapping. The script
    considers only the tags specified in this field. You can map label to another
    value by using this format: LABEL:MAPPED_LABEL. For example, for 4 values in email
    tag: malicious, credentials harvesting, inner communitcation, external legit email,
    unclassified. While training, we want to ignore "unclassified" tag, and refer
    to "credentials harvesting" as "malicious" too. Also, we want to     merge "inner
    communitcation" and "external legit email" to one tag called "non-malicious".
    The input will be: malicious, credentials harvesting:malicious, inner communitcation:non-malicious,
    external legit email:non-malicious'
  playbookInputQuery: null
- key: incidentsQuery
  value: {}
  required: false
  description: The incidents query to fetch the training data for the model.
  playbookInputQuery: null
- key: maxIncidentsToFetchOnTraining
  value:
    simple: "3000"
  required: false
  description: The maximum number of incidents to fetch.
  playbookInputQuery: null
- key: hashSeed
  value: {}
  required: false
  description: If non-empty, hash every word with this seed.
  playbookInputQuery: null
- key: historicalDataFileListName
  value: {}
  required: false
  description: The name of demisto list contains historical data training samples
    for the model.
  playbookInputQuery: null
- key: overrideModel
  value:
    simple: "true"
  required: false
  description: Whether to override the existing model if a model with the same name
    exists. Default is "false".
  playbookInputQuery: null
- key: incidentTypes
  value:
    simple: Phishing
  required: false
  description: A common-separatetd list of incident types by which to filter.
  playbookInputQuery: null
- key: dedupThreshold
  value:
    simple: "0.99"
  required: false
  description: Remove emails with similarity greater then this threshold, range 0-1,
    where 1 is completly identical.
  playbookInputQuery: null
- key: removeShortTextThreshold
  value:
    simple: "15"
  required: false
  description: Sample text of which the total number words are less than or equal
    to this number will be ignored.
  playbookInputQuery: null
- key: modelTargetAccuracy
  value:
    simple: "0.8"
  required: false
  description: The model target accuracy, between 0 and 1.
  playbookInputQuery: null
- key: outputFormat
  value:
    simple: pickle
  required: false
  description: The files output format, choose between json \ pickle.
  playbookInputQuery: null
- key: fileID
  value: {}
  required: true
  description: The ID of the file containing phishing incidents.
  playbookInputQuery: null
outputs:
- contextPath: DBotPhishingClassifier.EvaluationScores.micro_avg.f1-score
  description: F1 score (0-1)
  type: number
- contextPath: DBotPhishingClassifier.EvaluationScores.micro_avg.precision
  description: Precision score (0-1)
  type: number
- contextPath: DBotPhishingClassifier.EvaluationScores.micro_avg.recall
  description: Rrecision score (0-1)
  type: number
- contextPath: DBotPhishingClassifier.ModelName
  description: Model name in Demisto
  type: string
sourceplaybookid: DBot Create Phishing Classifier V2
